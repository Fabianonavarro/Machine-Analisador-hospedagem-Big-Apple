import pandas as pd
import matplotlib.pyplot as plt
from datetime import date
from fpdf import FPDF
import os
import streamlit as st
import requests
from io import BytesIO
import streamlit.components.v1 as components

# Definindo a URL dos dados
URL = "https://drive.google.com/uc?export=download&id=1fFdsWMPPY3dneNPQMfXFtbtTTdVlAitV"

def download_file(url):
    response = requests.get(url)
    response.raise_for_status()
    return response.content

def carregar_dados():
    # Mostra a mensagem de carregamento
    with st.spinner('Carregando dados...'):
        data = download_file(URL)
        df = pd.read_csv(BytesIO(data))
    return df

def formatar_respostas():
    resposta_style = """
    <style>
    .resposta {
        background-color: #cfe2f3; /* Fundo Azul muito claro */
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 10px;
    }
    .resposta p {
        font-size: 22px; /* Tamanho da fonte das respostas */
        color: #2986cc; /* Texto Azul */
        font-weight: bold;
    }
   
    </style>
    """
    return resposta_style

def respostas(df):
    st.markdown(formatar_respostas(), unsafe_allow_html=True)
    
    st.markdown("""
    <div class="resposta">
        <p class="pergunta">1. Qual o valor m√©dio do aluguel na cidade de Nova York?</p>
        <p>U$ {:.2f}</p>
    </div>
    """.format(df['price'].mean()), unsafe_allow_html=True)
    
    st.markdown("""
    <div class="resposta">
        <p class="pergunta">2. Quais os nomes das regi√µes que existem na cidade de Nova York?</p>
        <p>{}</p>
    </div>
    """.format(', '.join(df['neighbourhood_group'].unique())), unsafe_allow_html=True)

    st.markdown("""
    <div class="resposta">
        <p class="pergunta">3. Qual o valor do aluguel di√°rio mais caro da cidade de Nova York?</p>
        <p>U$ {:.2f}</p>
    </div>
    """.format(df['price'].max()), unsafe_allow_html=True)
    
    st.markdown("""
    <div class="resposta">
        <p class="pergunta">4. Quais s√£o as categorias de im√≥veis que est√£o cadastradas na cidade de Nova York?</p>
        <p>As categorias s√£o: {}</p>
    </div>
    """.format(', '.join(df['room_type'].unique())), unsafe_allow_html=True)
    
    st.markdown("""
    <div class="resposta">
        <p class="pergunta">5. Quantos usu√°rios (Hosts) √∫nicos cadastrados existem dentro da base de dados da cidade de Nova York?</p>
        <p>{}</p>
    </div>
    """.format(df['host_id'].nunique()), unsafe_allow_html=True)
    
    st.markdown("""
    <div class="resposta">
        <p class="pergunta">6. Como √© a varia√ß√£o dos pre√ßos dos im√≥veis em NY?</p>
        <p>Os pre√ßos est√£o dispersos em U$ {:.2f} em torno da m√©dia</p>
    </div>
    """.format(df['price'].std()), unsafe_allow_html=True)

def salvar_grafico(data, bins, cor, titulo, xlabel, ylabel, nome_arquivo):
    plt.figure(figsize=(10, 6))
    plt.hist(data, bins=bins, color=cor, edgecolor='black')
    plt.title(titulo)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.grid(True)
    plt.savefig(nome_arquivo)
    plt.close()

def graficos(df):
    st.write("### Gr√°ficos:")
    salvar_grafico(df[df['price'] < 1250]['price'], 15, 'blue', "Distribui√ß√£o dos Im√≥veis Baratos", "Pre√ßo", "N√∫mero de Im√≥veis", 'grafico_imoveis_baratos.png')
    salvar_grafico(df['number_of_reviews'], 12, 'green', "Distribui√ß√£o do N√∫mero de Reviews", "N√∫mero de Reviews", "N√∫mero de Im√≥veis", 'grafico_numero_reviews.png')

    st.image('grafico_imoveis_baratos.png', caption='Distribui√ß√£o dos Im√≥veis Baratos', use_column_width=True)
    st.image('grafico_numero_reviews.png', caption='Distribui√ß√£o do N√∫mero de Reviews', use_column_width=True)

def pdf(df):
    formatted_date = date.today().strftime('%d/%m/%Y')
    medio = df['price'].mean()
    unica = ', '.join(df['neighbourhood_group'].unique())
    preco_aluguel = df['price'].max()
    room_unique = ', '.join(df['room_type'].unique())
    q_usuario = df['host_id'].nunique()
    desvio_padrao = df['price'].std()

    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.image("template.png", x=0, y=0, w=210, h=297)
    pdf.set_font("Arial", size=12)
    pdf.text(87, 33, f" {formatted_date}")
    pdf.text(65, 147, f" U$ {medio:.2f}")
    pdf.text(65, 155, f" {unica}")
    pdf.text(65, 164, f" U$ {preco_aluguel:.2f}")
    pdf.text(65, 174, f" {room_unique}")
    pdf.text(65, 184, f" {q_usuario}")
    pdf.text(65, 192, f" {desvio_padrao:.2f}")

    pdf.ln(20)
    if os.path.isfile('grafico_imoveis_baratos.png') and os.path.isfile('grafico_numero_reviews.png'):
        pdf.text(0, 217, "Im√≥veis Baratos")
        pdf.image('grafico_imoveis_baratos.png', x=0, y=223, w=100)
        pdf.text(100, 217, "N√∫mero de Reviews")
        pdf.image('grafico_numero_reviews.png', x=90, y=223, w=100)
    else:
        st.write("Um ou ambos os arquivos de gr√°ficos n√£o foram encontrados.")

    pdf_output_path = "respostas.pdf"
    if os.path.isfile(pdf_output_path):
        os.remove(pdf_output_path)
    pdf.output(pdf_output_path)
    st.write("PDF gerado com sucesso!")

    with open(pdf_output_path, "rb") as f:
        st.download_button(label="Baixar PDF", data=f, file_name=pdf_output_path)

def mapas():
    st.write("### Mapa dos Hot√©is")
    with open('testemap.html', 'r') as f:
        map_html = f.read()
    components.html(map_html, height=600, scrolling=True)

def localizacao():
    st.write("### Localiza√ß√£o das Hospedagens")
    with open('teste.html', 'r') as f:
        location_html = f.read()
    components.html(location_html, height=600, scrolling=True)

def pagina_inicial():
    st.title("Bem-vindo ao Analisador de Alugu√©is de Nova York!")
    st.write("""
    New York City, conhecida como Big Apple, √© uma cidade vibrante e cheia de vida. 
    Este aplicativo permite que voc√™ analise dados de alugu√©is em Nova York.

    Utilize o menu lateral para:

    - Ver respostas √†s perguntas sobre os dados
    - Visualizar gr√°ficos relacionados aos alugu√©is
    - Explorar mapas dos hot√©is e localiza√ß√µes de hospedagens
    - Gerar um PDF com as an√°lises
    """)

    st.write("""
    <div style="background-color: #f5f5f5; padding: 10px; border-radius: 5px; position: fixed; bottom: 0; left: 0; width: 100%; text-align: center; box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);">
        <p style="margin: 0; font-size: 16px; color: #0033cc;"><strong>Desenvolvido por Fabiano</strong></p>
        <p style="margin: 0;">
            üì´ <a href="https://www.dio.me/users/nav_info_suporte" style="color: #0033cc; text-decoration: none;">Portf√≥lio</a> |
            <a href="https://github.com/Fabianonavarro" style="color: #0033cc; text-decoration: none;">GitHub</a> |
            <a href="https://www.linkedin.com/in/fabiano-de-navarro" style="color: #0033cc; text-decoration: none;">LinkedIn</a>
        </p>
    </div>
    """, unsafe_allow_html=True)

def main():
    st.sidebar.title("Navega√ß√£o")
    page = st.sidebar.radio("Escolha uma op√ß√£o:", ["P√°gina Inicial", "Respostas", "Gr√°ficos", "PDF", "Mapas", "Localiza√ß√£o"])
    
    if page == "P√°gina Inicial":
        pagina_inicial()
    else:
        df = carregar_dados()
        if page == "Respostas":
            respostas(df)
        elif page == "Gr√°ficos":
            graficos(df)
        elif page == "PDF":
            pdf(df)
        elif page == "Mapas":
            mapas()
        elif page == "Localiza√ß√£o":
            localizacao()

if __name__ == "__main__":
    main()
